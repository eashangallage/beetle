<?xml version="1.0"?>
<robot name="underdog" xmlns:xacro="http://ros.org/wiki/xacro">

  <!-- Define robot constants -->
  <xacro:property name="base_width" value="0.2"/>
  <xacro:property name="base_length" value="0.3"/>
  <xacro:property name="base_height" value="0.015"/>

  <xacro:property name="motor_radius" value="0.0175"/>
  <xacro:property name="motor_length" value="0.05"/>
  <xacro:property name="motor_yoff" value="0.06"/>
  <xacro:property name="motor_zoff" value="0.04"/>
  <xacro:property name="motor_xoff" value="0.1"/>

  <xacro:property name="rear_wheel_radius" value="0.0335"/>
  <xacro:property name="rear_wheel_width" value="0.027"/>
  <xacro:property name="rear_wheel_yoff" value="0.11"/>
  <xacro:property name="rear_wheel_zoff" value="0.007"/>
  <xacro:property name="rear_wheel_sep" value="${2*rear_wheel_yoff}"/>

  <xacro:property name="front_wheel_radius" value="0.0255"/>
  <xacro:property name="front_wheel_width" value="0.019"/>
  <xacro:property name="front_wheel_yoff" value="0.06"/>
  <xacro:property name="front_wheel_zoff" value="0.04"/>
  <xacro:property name="front_wheel_xoff" value="0.1"/>
  <xacro:property name="front_wheel_sep" value="${2*front_wheel_yoff}"/>

  <xacro:property name="steer_rod_yoff" value="0.0375"/>
  <xacro:property name="steer_rod_radius" value="0.0025"/>
  <xacro:property name="steer_rod_length" value="0.04"/>

  <!-- Define intertial property macros  -->
  <xacro:macro name="box_inertia" params="m w h d">
    <inertial>
      <origin xyz="0 0 0" rpy="${pi/2} 0 ${pi/2}"/>
      <mass value="${m}"/>
      <inertia ixx="${(m/12) * (h*h + d*d)}" ixy="0.0" ixz="0.0" iyy="${(m/12) * (w*w + d*d)}" iyz="0.0" izz="${(m/12) * (w*w + h*h)}"/>
    </inertial>
  </xacro:macro>

  <xacro:macro name="cylinder_inertia" params="m r h">
    <inertial>
      <origin xyz="0 0 0" rpy="${pi/2} 0 0" />
      <mass value="${m}"/>
      <inertia ixx="${(m/12) * (3*r*r + h*h)}" ixy = "0" ixz = "0" iyy="${(m/12) * (3*r*r + h*h)}" iyz = "0" izz="${(m/2) * (r*r)}"/>
    </inertial>
  </xacro:macro>

  <xacro:macro name="standing_cylinder_inertia" params="m r h">
    <inertial>
      <origin xyz="0 0 0" rpy="0 0 0" />
      <mass value="${m}"/>
      <inertia ixx="${(m/12) * (3*r*r + h*h)}" ixy = "0" ixz = "0" iyy="${(m/12) * (3*r*r + h*h)}" iyz = "0" izz="${(m/2) * (r*r)}"/>
    </inertial>
  </xacro:macro>

  <xacro:macro name="sphere_inertia" params="m r">
    <inertial>
      <mass value="${m}"/>
      <inertia ixx="${(2/5) * m * (r*r)}" ixy="0.0" ixz="0.0" iyy="${(2/5) * m * (r*r)}" iyz="0.0" izz="${(2/5) * m * (r*r)}"/>
    </inertial>
  </xacro:macro>

  <!-- Robot Base -->
  <link name="base_link">
    <visual>
      <geometry>
        <box size="${base_length} ${base_width} ${base_height}"/>
      </geometry>
      <material name="Cyan">
        <color rgba="0 1.0 1.0 1.0"/>
      </material>
    </visual>

    <collision>
      <geometry>
        <box size="${base_length} ${base_width} ${base_height}"/>
      </geometry>
    </collision>

    <xacro:box_inertia m="0.5" w="${base_width}" d="${base_length}" h="${base_height}"/>
  </link>

  <!-- Robot Footprint -->
  <link name="base_footprint"/>

  <joint name="base_joint" type="fixed">
    <parent link="base_link"/>
    <child link="base_footprint"/>
    <origin xyz="${-motor_xoff} 0.0 ${-(rear_wheel_radius+rear_wheel_zoff+motor_zoff)}" rpy="0 0 0"/>
  </joint>

  <!-- Motors and drive wheels -->
  <xacro:macro name="rear_wheel" params="prefix x_reflect y_reflect">
    <link name="${prefix}_motor_link">
      <visual>
        <origin xyz="0 0 0" rpy="${pi/2} 0 0"/>
        <geometry>
          <cylinder radius="${motor_radius}" length="${motor_length}"/>
        </geometry>
        <material name="Gray">
          <color rgba="0.5 0.5 0.5 1.0"/>
        </material>
      </visual>

      <collision>
        <origin xyz="0 0 0" rpy="${pi/2} 0 0"/>
        <geometry>
          <cylinder radius="${motor_radius}" length="${motor_length}"/>
        </geometry>
      </collision>

      <xacro:cylinder_inertia m="0.15" r="${motor_radius}" h="${motor_length}"/>
    </link>

    <joint name="${prefix}_motor_joint" type="fixed">
      <parent link="base_link"/>
      <child link="${prefix}_motor_link"/>
      <origin xyz="${x_reflect*motor_xoff} ${y_reflect*motor_yoff} ${-motor_zoff}" rpy="0 0 0"/>
    </joint>

    <link name="${prefix}_link">
      <visual>
        <origin xyz="0 0 0" rpy="${pi/2} 0 0"/>
        <geometry>
          <cylinder radius="${rear_wheel_radius}" length="${rear_wheel_width}"/>
        </geometry>
        <material name="Gray">
          <color rgba="0.5 0.5 0.5 1.0"/>
        </material>
      </visual>

      <collision>
        <origin xyz="0 0 0" rpy="${pi/2} 0 0"/>
        <geometry>
          <cylinder radius="${rear_wheel_radius}" length="${rear_wheel_width}"/>
        </geometry>
      </collision>

      <xacro:cylinder_inertia m="0.05" r="${rear_wheel_radius}" h="${rear_wheel_width}"/>
    </link>

    <joint name="${prefix}_joint" type="continuous">
      <parent link="${prefix}_motor_link"/>
      <child link="${prefix}_link"/>
      <!-- <origin xyz="${x_reflect*motor_xoff} ${y_reflect*rear_wheel_yoff} ${-(motor_zoff+rear_wheel_zoff)}" rpy="0 0 0"/> -->
      <origin xyz="0 ${y_reflect*(rear_wheel_yoff - motor_yoff)} ${-rear_wheel_zoff}" rpy="0 0 0"/>
      <axis xyz="0 1 0"/>
    </joint>
  </xacro:macro>

  <xacro:rear_wheel prefix="drivewhl_l" x_reflect="-1" y_reflect="1" />
  <xacro:rear_wheel prefix="drivewhl_r" x_reflect="-1" y_reflect="-1" />

  <!-- Steering wheels -->
  <xacro:macro name="front_wheel" params="prefix x_reflect y_reflect">
    <link name="${prefix}_steer_link">
      <visual>
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <geometry>
          <cylinder radius="${steer_rod_radius}" length="${steer_rod_length}"/>
        </geometry>
        <material name="Gray">
          <color rgba="0.5 0.5 0.5 1.0"/>
        </material>
      </visual>

      <collision>
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <geometry>
          <cylinder radius="${steer_rod_radius}" length="${steer_rod_length}"/>
        </geometry>
      </collision>

      <xacro:standing_cylinder_inertia m="0.02" r="${steer_rod_radius}" h="${steer_rod_length}"/>
    </link>

    <joint name="${prefix}_steer_joint" type="continuous">
      <parent link="base_link"/>
      <child link="${prefix}_steer_link"/>
      <origin xyz="${x_reflect*front_wheel_xoff} ${y_reflect*front_wheel_yoff} ${-(steer_rod_length/2+base_height/2)}" rpy="0 0 0"/>
      <axis xyz="0 0 1"/>
    </joint>

    <link name="${prefix}_link">
      <visual>
        <origin xyz="0 0 0" rpy="${pi/2} 0 0"/>
        <geometry>
          <cylinder radius="${front_wheel_radius}" length="${front_wheel_width}"/>
        </geometry>
        <material name="Gray">
          <color rgba="0.5 0.5 0.5 1.0"/>
        </material>
      </visual>

      <collision>
        <origin xyz="0 0 0" rpy="${pi/2} 0 0"/>
        <geometry>
          <cylinder radius="${front_wheel_radius}" length="${front_wheel_width}"/>
        </geometry>
      </collision>

      <xacro:cylinder_inertia m="0.03" r="${front_wheel_radius}" h="${front_wheel_width}"/>
    </link>

    <joint name="${prefix}_joint" type="continuous">
      <parent link="${prefix}_steer_link"/>
      <child link="${prefix}_link"/>
      <!-- <origin xyz="0 ${y_reflect*(front_wheel_yoff-steer_rod_yoff)} ${-(front_wheel_zoff-(steer_rod_length/2+base_height/2))}" rpy="0 0 0"/> -->
      <origin xyz="${-(front_wheel_radius+2*steer_rod_radius)} 0 ${-(front_wheel_zoff-(steer_rod_length/2+base_height/2))}" rpy="0 0 0"/>
      <axis xyz="0 1 0"/>
    </joint>
  </xacro:macro>

  <xacro:front_wheel prefix="steerwhl_l" x_reflect="1" y_reflect="1" />
  <xacro:front_wheel prefix="steerwhl_r" x_reflect="1" y_reflect="-1" />

  <link name="steering_link">
    <visual>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <cylinder radius="${steer_rod_radius}" length="${steer_rod_length/2}"/>
      </geometry>
      <material name="Gray">
        <color rgba="0.5 0.5 0.5 1.0"/>
      </material>
    </visual>

    <collision>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <cylinder radius="${steer_rod_radius}" length="${steer_rod_length/2}"/>
      </geometry>
    </collision>

    <xacro:standing_cylinder_inertia m="0.01" r="${steer_rod_radius}" h="${steer_rod_length/2}"/>
  </link>

  <joint name="steering_joint" type="revolute">
    <axis xyz="0 0 1"/>
    <limit effort="1000.0" lower="-0.548" upper="0.548" velocity="0.5"/>
    <parent link="base_link"/>
    <child link="steering_link"/>
    <origin xyz="${front_wheel_xoff} 0 ${steer_rod_length/4+base_height/2}" rpy="0 0 0"/>
  </joint>

  <link name="imu_link">
    <visual>
      <geometry>
        <box size="0.01 0.01 0.004"/>
      </geometry>
    </visual>

    <collision>
      <geometry>
        <box size="0.01 0.01 0.004"/>
      </geometry>
    </collision>

    <xacro:box_inertia m="0.001" w="0.01" d="0.01" h="0.004"/>
  </link>

  <joint name="imu_joint" type="fixed">
    <parent link="base_link"/>
    <child link="imu_link"/>
    <origin xyz="0 0 0.01"/>
  </joint>

  <gazebo reference="imu_link">
    <sensor name="imu_sensor" type="imu">
      <plugin filename="libgazebo_ros_imu_sensor.so" name="imu_plugin">
        <ros>
          <namespace>/demo</namespace>
          <remapping>~/out:=imu</remapping>
        </ros>
        <initial_orientation_as_reference>false</initial_orientation_as_reference>
      </plugin>
      <always_on>true</always_on>
      <update_rate>100</update_rate>
      <visualize>true</visualize>
      <imu>
        <angular_velocity>
          <x>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>2e-4</stddev>
              <bias_mean>0.0000075</bias_mean>
              <bias_stddev>0.0000008</bias_stddev>
            </noise>
          </x>
          <y>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>2e-4</stddev>
              <bias_mean>0.0000075</bias_mean>
              <bias_stddev>0.0000008</bias_stddev>
            </noise>
          </y>
          <z>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>2e-4</stddev>
              <bias_mean>0.0000075</bias_mean>
              <bias_stddev>0.0000008</bias_stddev>
            </noise>
          </z>
        </angular_velocity>
        <linear_acceleration>
          <x>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>1.7e-2</stddev>
              <bias_mean>0.1</bias_mean>
              <bias_stddev>0.001</bias_stddev>
            </noise>
          </x>
          <y>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>1.7e-2</stddev>
              <bias_mean>0.1</bias_mean>
              <bias_stddev>0.001</bias_stddev>
            </noise>
          </y>
          <z>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>1.7e-2</stddev>
              <bias_mean>0.1</bias_mean>
              <bias_stddev>0.001</bias_stddev>
            </noise>
          </z>
        </linear_acceleration>
      </imu>
    </sensor>
  </gazebo>

  <gazebo>
    <plugin name='diff_drive' filename='libgazebo_ros_diff_drive.so'>
      <ros>
        <namespace>/demo</namespace>
      </ros>
      <left_joint>drivewhl_l_joint</left_joint>
      <right_joint>drivewhl_r_joint</right_joint>

      <wheel_separation>${rear_wheel_sep}</wheel_separation>
      <wheel_diameter>${rear_wheel_radius*2}</wheel_diameter>

      <max_wheel_torque>20</max_wheel_torque>
      <max_wheel_acceleration>1.0</max_wheel_acceleration>

      <publish_odom>true</publish_odom>
      <publish_odom_tf>false</publish_odom_tf>
      <publish_wheel_tf>true</publish_wheel_tf>

      <odometry_frame>odom</odometry_frame>
      <robot_base_frame>base_link</robot_base_frame>
    </plugin>
  </gazebo>

</robot>
